1、用函数型function替换if else @see com.maviron.spring.springdemo.function
2、分支进行各个处理 @see com.maviron.spring.springdemo.demo.futuredemo.SendJoinGroupRequest
3、用lambda表达式遍历树节点  com.maviron.spring.springdemo.demo.handletree.TestTreeMenu
4、重试 采用springboot进行重试
 <dependency>
  <groupId>org.springframework.retry</groupId>
  <artifactId>spring-retry</artifactId>
 </dependency>
 https://github.com/javastacks/spring-boot-best-practice
5、使用递归遍历树 com.maviron.spring.springdemo.controller
6、pipline设计模式 com.maviron.spring.springdemo.piplinedesign
7、日志操作   <dependency>
                    <groupId>io.github.mouzt</groupId>
                    <artifactId>bizlog-sdk</artifactId>
                    <version>1.0.1</version>
                </dependency>
  https://mp.weixin.qq.com/s/8djOSaML-X8TeNC9WiVkgA
8、使用BeanPostProcessor自动映射AB测试
9、动态sql  com.maviron.spring.springdemo.controller.TableTestController
10、使用fetchSize提高获取数据的效率
11、PageHelper.startPage()后面必须紧跟list所以有一定的局限性  使用com.maviron.spring.springdemo.pageHelperUtil  进行优化即可
12、比较两个字段并获取其中不同值的属性 com.maviron.spring.springdemo.beanequals.AbstractContrast
13、规则引擎 用于处理if else 的处理 com.maviron.spring.springdemo.regulationengine.RuleClass
14、Pipline pipline模式 流水模式 通过next用于流程性校验 pipline的context模式 用于多线程的先后处理 com.maviron.spring.springdemo.piplinedesign
15、责任链校验 com.maviron.spring.springdemo.design.chain.DefaultSignUpValidationService
16、com.maviron.spring.springdemo.test.ShortTextUtil生成不重复的短字符串
17、https://juejin.cn/post/7220434734965866556?utm_source=gold_browser_extension  mysql进行排名的模拟实现
18、com.maviron.spring.springdemo.until.WeightedRandomSelector  权重的实现
19、arthas命令
  jad --source-only com.alliance.adx.service.ikan.AdIkanService
  dashboard
  trace com.alliance.adx.service.impl.AbstractAdxResponseService getCheckBidResponses -v -n 5 --skipJDKMethod false '1==1'
  watch com.alliance.adx.service.ikan.AdIkanService doHandle "{params,target,returnObj}"  -x 1 "params[2].getSposid().equals('30000339')"
20、适配模式 易使用于参数转换或者不同参数的赋值 com.maviron.spring.springdemo.design.practise.ApiTest
21、使用Jprofier对内存和CPU进行分析
22、dependencyManagement只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来；只有在子项目中写了该依赖项，并且没有指定具体版本，
才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本
23、分模块构建参考 https://juejin.cn/post/7204767643676786725?utm_source=gold_browser_extension
24、上下文模式的使用场景：
   1、线程在执行过程中分了多个阶段
   2、后一个方法可能需要用到前一个阶段的结果
   3、通过设置上下文，每执行一个方法将结果放到上下文中，下一个方法调用时会调取上下文的结果继续执行
   4、这个上下文在线程中是单例的
25、版本的比较  com.maviron.spring.springdemo.demo.compareVersion
26、actor模式  com.maviron.spring.springdemo.actor
27、状态机的四大概念：状态、事件、动作和变换：https://mp.weixin.qq.com/s/n6QYCC4FD6PRafC2cruUXw
28、大文件的上传 https://juejin.cn/post/7284630352788717608?utm_source=gold_browser_extension

